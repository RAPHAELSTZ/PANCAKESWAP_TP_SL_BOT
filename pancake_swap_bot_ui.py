#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    May 25, 2021 12:38:49 PM CEST  platform: Windows NT

import sys
from tkinter import Image, Label, PhotoImage, Variable, messagebox
import os
import subprocess
import threading

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
    from tkinter.messagebox import *
try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import pancake_swap_bot_ui_support
import browser_methods 

CURRENTPRICE_WORDING = 'Current Price:'
SWAPS_WORDING ='Swaps:'

def vp_start_gui():
    "Starting point when module is the main routine."
    global val, w, root, bm
    root = tk.Tk()
    # Instanciate Browser Methods 
    bm = browser_methods.browser_methods()
    pancake_swap_bot_ui_support.set_Tk_var()
    top = Toplevel1 (root)
    pancake_swap_bot_ui_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root, bm
    #rt = root
    root = rt
    bm = browser_methods.browser_methods()
    w = tk.Toplevel (root)
    pancake_swap_bot_ui_support.set_Tk_var()
      
    top = Toplevel1 (w)
    pancake_swap_bot_ui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    global current_operation
    current_operation = {}
    
    def startRobot(self):
        print(self.checkInput())
        if(self.checkInput()):
            # First thing to do is grey out quantity, token from and token to (If user changes his mind he can force quit the bot)
            # self.Labelframe1.configure(state="disabled")
            for child in self.Labelframe1.winfo_children():
                child.configure(state='disable')

            for child in self.Labelframe1_4.winfo_children():
                child.configure(state='disable')
                

            print(current_operation)
            # Get the first part of the take profit scenario and gets the current price of the token
    
            first_part_take_profit = bm.TAKE_PROFIT_BOT(current_operation["token_from"],current_operation["token_to"],current_operation["percentage"])

            pancake_swap_bot_ui_support.PRICE.set(first_part_take_profit)
            
            if(first_part_take_profit>0):
                # Invite user to enter a limit and/or a stop loss
                bm.Mbox("Enter Limit / Stop Loss", "It's time to enter either a limit, a stop loss or both !")
                # Activates the two check boxes that will turn limits/sl on and off
                self.CHECK_BOX_SL.configure(state='normal')
                self.CHECK_BOX_TP.configure(state='normal')
                root.after(1, lambda: root.focus_force())
                # Allows user to update limits FIELD and STOP LOSS FIELD
                self.TAKE_PROFIT_AT.configure(state='normal')
                self.STOP_LOSS_AT.configure(state='normal')
                self.START_SECOND_PART.configure(state='normal')

                # Deactivate Start Robot button
                self.START_BOT_BUTTON.configure(state='disabled')
                self.PERCENTAGE_BUTTON.configure(state='disabled') #recently changed
                

    def updateViewPricing(self, price):
        self.PRICING.configure(text="PRICE:"+price)+ " " + str(current_operation["token_to"]) + " " +str(current_operation["token_from"]) 


    def startLimits(self):
        # CHANGE !!!! BEFORE PROD
        # self.TAKE_PROFIT_AT.configure(state='normal')

        if(not self.buttonStartSecondPart()):
            return
        
        PRICE = pancake_swap_bot_ui_support.PRICE.get()
        TP_ACTIVATED = pancake_swap_bot_ui_support.TAKE_PROFIT_ACTIVATED.get()
        SL_ACTIVATED = pancake_swap_bot_ui_support.STOP_LOSS_ACTIVATED.get()
        TP_LIMIT = pancake_swap_bot_ui_support.LIMIT_TP.get()
        SL_LIMIT = pancake_swap_bot_ui_support.STOP_LOSS.get()

 
        if(self.isLimit(TP_LIMIT, PRICE) and TP_ACTIVATED and not SL_ACTIVATED):
            print("DISPLAYING LIMIT CHOSEN :::"+str(TP_LIMIT))
            print("Displaying price :::"+str(pancake_swap_bot_ui_support.PRICE))
            bm.TAKE_PROFIT_PART_II(TP_LIMIT, SL_LIMIT, pancake_swap_bot_ui_support.PRICE , current_operation["token_from"], current_operation["token_to"], root, "TAKE_PROFIT" )

        elif(self.isStopLoss(SL_LIMIT, PRICE) and SL_ACTIVATED and not TP_ACTIVATED):
            print("DISPLAYING LIMIT CHOSEN :::"+str(SL_LIMIT))
            print("Displaying price :::"+str(pancake_swap_bot_ui_support.PRICE))
            bm.TAKE_PROFIT_PART_II(TP_LIMIT, SL_LIMIT, pancake_swap_bot_ui_support.PRICE , current_operation["token_from"], current_operation["token_to"], root, "STOP_LOSS" )
        
        elif(self.isStopLoss(SL_LIMIT, PRICE) and self.isLimit(TP_LIMIT, PRICE) and SL_ACTIVATED and TP_ACTIVATED):
            print("Take profit limit :::"+str(TP_LIMIT))
            print("Stop loss limit :::"+str(SL_LIMIT))
            print("Displaying price :::"+str(pancake_swap_bot_ui_support.PRICE))
            bm.TAKE_PROFIT_PART_II(TP_LIMIT, SL_LIMIT, pancake_swap_bot_ui_support.PRICE , current_operation["token_from"], current_operation["token_to"], root, "STOP_LOSS_AND_TP" )


    def buttonStartSecondPart(self):
        return messagebox.askyesno("Launch Robot ?","Launch robot or add/remove limit ?")

     

    def isLimit(self, limit, PRICE):
        if(limit is not None and limit !=''):
            try:
                limit = float(limit)
                if(limit > 0 and float(limit)>float(PRICE)):
                    return limit
                else:
                    return False
            except ValueError:
                bm.Mbox('Wrong stop loss!', 'You need to enter a limit price above 0 and above the current price.')
                print("VALUE ERROR FOR LIMIT PRICE")
                return False

    def isStopLoss(self, STOPLOSS, PRICE):
        if(STOPLOSS is not None and STOPLOSS !=''):
            try:
                print("IN HERE ?")
                STOPLOSS = float(STOPLOSS)
                if(STOPLOSS > 0 and float(STOPLOSS)<float(PRICE)):
                    return STOPLOSS
                else:
                    return False
            except ValueError:
                print("VALUE ERROR FOR STOP LOSS PRICE")
                bm.Mbox('Wrong stop loss!', 'You need to enter a stop loss price above 0 and bellow the current price.')

                return False
        else:
            print("NOT HERE !")
   

            print("Limit is defined")

    def isGoodFormatErc20(self, address):
        if(str(address).startswith("0x")):
            return True
        else:
            showerror("Wrong address format","Wrong ERC20/BEP20 format for address provided!")
            return False
    
    def isPercentageCorrect(self, value):
        try:
            floatable = float(value)
            if 0.0< floatable <=100.0:
                return True
        except ValueError as e:
            showerror("Wrong percentage Value", "Value entered isn't a number between 1 and 100 :")
            return False

    def checkInput(self):
        # Values of RADIO buttons
        from_choice = pancake_swap_bot_ui_support.TOKEN_FROM_CHOICE.get()
        to_choice = pancake_swap_bot_ui_support.TOKEN_TO_CHOICE.get()

        if(from_choice =='' or to_choice==''):
            showerror("Information missing", "You need to choose both sides of the swap ! ")
            return False

        # If entree was custom we take user value as entree
        if(from_choice.strip() == 'CUSTOM'):
            # Values of associated ENTRY fields
            # texte_val = self.CUSTOM_TOKEN_FROM.get()
            texte_val = pancake_swap_bot_ui_support.TOKEN_CUSTOM_FROM_CHOICE.get()
            print("TEXT VAL IS ::"+texte_val)
            if(texte_val.strip() == ''):
                showerror("Information missing", "You need to choose both sides of the swap ! ")
                return False

            if(not self.isGoodFormatErc20(texte_val.strip())):   
                return False 

            from_choice = texte_val

        if(to_choice.strip() == 'CUSTOM'):
            texte_val = pancake_swap_bot_ui_support.TOKEN_CUSTOM_TO_CHOICE.get()
            if(texte_val.strip() == ''):
                showerror("Information missing", "You need to choose both sides of the swap ! ")
                return False

            if(not self.isGoodFormatErc20(texte_val.strip())):   
                return False 

            to_choice = texte_val

        if(from_choice==to_choice):
            showerror("Can't swap itself!", "You need to choose different tokens for the swap ! ")
            return False

        # If the percentage is not right, returns false
        if(not self.isPercentageCorrect(pancake_swap_bot_ui_support.PERCENTAGE.get())):
            return False      

        print("CUSTOM TOKEN TO :"+pancake_swap_bot_ui_support.TOKEN_TO_CHOICE.get()+"\nCUSTOM TOKEN FROM :"+pancake_swap_bot_ui_support.TOKEN_FROM_CHOICE.get())
        global current_operation
        current_operation = { 
                "token_to" : to_choice,
                "token_from" : from_choice,
                "percentage" : pancake_swap_bot_ui_support.PERCENTAGE.get()
            }
        return True

        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("688x583+965+300")
        top.minsize(120, 1)
        top.maxsize(3844, 1061)
        top.resizable(0,  0)
        top.title("PancakeSwap Robot V0.01")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Label1 = tk.Label(top)
        self.Label1.place(x=212, y=0, height=34, width=376)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 14")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text="Pancake Swap Bot V0.01")

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(x=25, y=110, height=216, width=174)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text="Token FROM")
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.BNB_BUTTON = tk.Radiobutton(self.Labelframe1)
        self.BNB_BUTTON.place(x=0, y=30, height=40, width=174, bordermode='ignore')
        self.BNB_BUTTON.configure(activebackground="#ececec")
        self.BNB_BUTTON.configure(activeforeground="#000000")
        self.BNB_BUTTON.configure(anchor='w')
        self.BNB_BUTTON.configure(background="#d9d9d9")
        self.BNB_BUTTON.configure(disabledforeground="#a3a3a3")
        self.BNB_BUTTON.configure(foreground="#000000")
        self.BNB_BUTTON.configure(highlightbackground="#d9d9d9")
        self.BNB_BUTTON.configure(highlightcolor="black")
        self.BNB_BUTTON.configure(justify='left')
        self.BNB_BUTTON.configure(padx="10")
        self.BNB_BUTTON.configure(text="BNB")
        self.BNB_BUTTON.configure(value="BNB")
        self.BNB_BUTTON.configure(variable=pancake_swap_bot_ui_support.TOKEN_FROM_CHOICE)

        self.USDC_BUTTON = tk.Radiobutton(self.Labelframe1)
        self.USDC_BUTTON.place(x=0, y=60, height=40, width=174, bordermode='ignore')
        self.USDC_BUTTON.configure(activebackground="#ececec")
        self.USDC_BUTTON.configure(activeforeground="#000000")
        self.USDC_BUTTON.configure(anchor='w')
        self.USDC_BUTTON.configure(background="#d9d9d9")
        self.USDC_BUTTON.configure(disabledforeground="#a3a3a3")
        self.USDC_BUTTON.configure(foreground="#000000")
        self.USDC_BUTTON.configure(highlightbackground="#d9d9d9")
        self.USDC_BUTTON.configure(highlightcolor="black")
        self.USDC_BUTTON.configure(justify='left')
        self.USDC_BUTTON.configure(padx="10")
        self.USDC_BUTTON.configure(text="USDC")
        self.USDC_BUTTON.configure(value="USDC")
        self.USDC_BUTTON.configure(variable=pancake_swap_bot_ui_support.TOKEN_FROM_CHOICE)

        self.USDT_BUTTON = tk.Radiobutton(self.Labelframe1)
        self.USDT_BUTTON.place(x=0, y=93, height=40, width=174, bordermode='ignore')
        self.USDT_BUTTON.configure(activebackground="#ececec")
        self.USDT_BUTTON.configure(activeforeground="#000000")
        self.USDT_BUTTON.configure(anchor='w')
        self.USDT_BUTTON.configure(background="#d9d9d9")
        self.USDT_BUTTON.configure(disabledforeground="#a3a3a3")
        self.USDT_BUTTON.configure(foreground="#000000")
        self.USDT_BUTTON.configure(highlightbackground="#d9d9d9")
        self.USDT_BUTTON.configure(highlightcolor="black")
        self.USDT_BUTTON.configure(padx="10")
        self.USDT_BUTTON.configure(text="USDT")
        self.USDT_BUTTON.configure(value="USDT")
        self.USDT_BUTTON.configure(variable=pancake_swap_bot_ui_support.TOKEN_FROM_CHOICE)

        self.BUSD_BUTTON = tk.Radiobutton(self.Labelframe1)
        self.BUSD_BUTTON.place(x=0, y=128, height=40, width=174, bordermode='ignore')
        self.BUSD_BUTTON.configure(activebackground="#ececec")
        self.BUSD_BUTTON.configure(activeforeground="#000000")
        self.BUSD_BUTTON.configure(anchor='w')
        self.BUSD_BUTTON.configure(background="#d9d9d9")
        self.BUSD_BUTTON.configure(disabledforeground="#a3a3a3")
        self.BUSD_BUTTON.configure(foreground="#000000")
        self.BUSD_BUTTON.configure(highlightbackground="#d9d9d9")
        self.BUSD_BUTTON.configure(highlightcolor="black")
        self.BUSD_BUTTON.configure(justify='left')
        self.BUSD_BUTTON.configure(padx="10")
        self.BUSD_BUTTON.configure(text="BUSD")
        self.BUSD_BUTTON.configure(value="BUSD")
        self.BUSD_BUTTON.configure(variable=pancake_swap_bot_ui_support.TOKEN_FROM_CHOICE)

        self.CUSTOMTOKEN_BUTTON = tk.Radiobutton(self.Labelframe1)
        self.CUSTOMTOKEN_BUTTON.place(x=0, y=170, height=40, width=43, bordermode='ignore')
        self.CUSTOMTOKEN_BUTTON.configure(activebackground="#ececec")
        self.CUSTOMTOKEN_BUTTON.configure(activeforeground="#000000")
        self.CUSTOMTOKEN_BUTTON.configure(anchor='w')
        self.CUSTOMTOKEN_BUTTON.configure(background="#d9d9d9")
        self.CUSTOMTOKEN_BUTTON.configure(disabledforeground="#a3a3a3")
        self.CUSTOMTOKEN_BUTTON.configure(foreground="#000000")
        self.CUSTOMTOKEN_BUTTON.configure(highlightbackground="#d9d9d9")
        self.CUSTOMTOKEN_BUTTON.configure(highlightcolor="black")
        self.CUSTOMTOKEN_BUTTON.configure(justify='left')
        self.CUSTOMTOKEN_BUTTON.configure(padx="10")
        self.CUSTOMTOKEN_BUTTON.configure(text="CUSTOMTEXT")
        self.CUSTOMTOKEN_BUTTON.configure(value="CUSTOM")
        self.CUSTOMTOKEN_BUTTON.configure(variable=pancake_swap_bot_ui_support.TOKEN_FROM_CHOICE)
        

        self.CUSTOM_TOKEN_FROM = tk.Entry(self.Labelframe1)
        self.CUSTOM_TOKEN_FROM.place(x=30, y=180, height=24, width=136, bordermode='ignore')
        self.CUSTOM_TOKEN_FROM.configure(background="white")
        self.CUSTOM_TOKEN_FROM.configure(font="TkTextFont")
        self.CUSTOM_TOKEN_FROM.configure(foreground="black")
        self.CUSTOM_TOKEN_FROM.configure(highlightbackground="#d9d9d9")
        self.CUSTOM_TOKEN_FROM.configure(highlightcolor="black")
        self.CUSTOM_TOKEN_FROM.configure(insertbackground="black")
        self.CUSTOM_TOKEN_FROM.configure(selectbackground="blue")
        self.CUSTOM_TOKEN_FROM.configure(selectforeground="white")
        self.CUSTOM_TOKEN_FROM.bind("<Button-1>", lambda e: activateRadio(self.CUSTOMTOKEN_BUTTON))
        self.CUSTOM_TOKEN_FROM.configure(textvariable=pancake_swap_bot_ui_support.TOKEN_CUSTOM_FROM_CHOICE)
        



        self.Labelframe1_4 = tk.LabelFrame(top)
        self.Labelframe1_4.place(x=25, y=350, height=216, width=175)
        self.Labelframe1_4.configure(relief='groove')
        self.Labelframe1_4.configure(foreground="black")
        self.Labelframe1_4.configure(text="Token TO")
        self.Labelframe1_4.configure(background="#d9d9d9")
        self.Labelframe1_4.configure(highlightbackground="#d9d9d9")
        self.Labelframe1_4.configure(highlightcolor="black")

        self.BNB_BUTTON_3 = tk.Radiobutton(self.Labelframe1_4)
        self.BNB_BUTTON_3.place(x=0, y=30, height=40, width=175, bordermode='ignore')
        self.BNB_BUTTON_3.configure(activebackground="#ececec")
        self.BNB_BUTTON_3.configure(activeforeground="#000000")
        self.BNB_BUTTON_3.configure(anchor='w')
        self.BNB_BUTTON_3.configure(background="#d9d9d9")
        self.BNB_BUTTON_3.configure(disabledforeground="#a3a3a3")
        self.BNB_BUTTON_3.configure(foreground="#000000")
        self.BNB_BUTTON_3.configure(highlightbackground="#d9d9d9")
        self.BNB_BUTTON_3.configure(highlightcolor="black")
        self.BNB_BUTTON_3.configure(justify='left')
        self.BNB_BUTTON_3.configure(padx="10")
        self.BNB_BUTTON_3.configure(text="BNB")
        self.BNB_BUTTON_3.configure(value="BNB")
        self.BNB_BUTTON_3.configure(variable=pancake_swap_bot_ui_support.TOKEN_TO_CHOICE)

        self.USDC_BUTTON_3 = tk.Radiobutton(self.Labelframe1_4)
        self.USDC_BUTTON_3.place(x=0, y=60, height=40, width=175, bordermode='ignore')
        self.USDC_BUTTON_3.configure(activebackground="#ececec")
        self.USDC_BUTTON_3.configure(activeforeground="#000000")
        self.USDC_BUTTON_3.configure(anchor='w')
        self.USDC_BUTTON_3.configure(background="#d9d9d9")
        self.USDC_BUTTON_3.configure(disabledforeground="#a3a3a3")
        self.USDC_BUTTON_3.configure(foreground="#000000")
        self.USDC_BUTTON_3.configure(highlightbackground="#d9d9d9")
        self.USDC_BUTTON_3.configure(highlightcolor="black")
        self.USDC_BUTTON_3.configure(justify='left')
        self.USDC_BUTTON_3.configure(padx="10")
        self.USDC_BUTTON_3.configure(text="USDC")
        self.USDC_BUTTON_3.configure(value="USDC")
        self.USDC_BUTTON_3.configure(variable=pancake_swap_bot_ui_support.TOKEN_TO_CHOICE)

        self.USDT_BUTTON_3 = tk.Radiobutton(self.Labelframe1_4)
        self.USDT_BUTTON_3.place(x=0, y=93, height=40, width=175, bordermode='ignore')
        self.USDT_BUTTON_3.configure(activebackground="#ececec")
        self.USDT_BUTTON_3.configure(activeforeground="#000000")
        self.USDT_BUTTON_3.configure(anchor='w')
        self.USDT_BUTTON_3.configure(background="#d9d9d9")
        self.USDT_BUTTON_3.configure(disabledforeground="#a3a3a3")
        self.USDT_BUTTON_3.configure(foreground="#000000")
        self.USDT_BUTTON_3.configure(highlightbackground="#d9d9d9")
        self.USDT_BUTTON_3.configure(highlightcolor="black")
        self.USDT_BUTTON_3.configure(padx="10")
        self.USDT_BUTTON_3.configure(text="USDT")
        self.USDT_BUTTON_3.configure(value="USDT")
        self.USDT_BUTTON_3.configure(variable=pancake_swap_bot_ui_support.TOKEN_TO_CHOICE)

        self.BUSD_BUTTON_3 = tk.Radiobutton(self.Labelframe1_4)
        self.BUSD_BUTTON_3.place(x=0, y=128, height=40, width=175, bordermode='ignore')
        self.BUSD_BUTTON_3.configure(activebackground="#ececec")
        self.BUSD_BUTTON_3.configure(activeforeground="#000000")
        self.BUSD_BUTTON_3.configure(anchor='w')
        self.BUSD_BUTTON_3.configure(background="#d9d9d9")
        self.BUSD_BUTTON_3.configure(disabledforeground="#a3a3a3")
        self.BUSD_BUTTON_3.configure(foreground="#000000")
        self.BUSD_BUTTON_3.configure(highlightbackground="#d9d9d9")
        self.BUSD_BUTTON_3.configure(highlightcolor="black")
        self.BUSD_BUTTON_3.configure(justify='left')
        self.BUSD_BUTTON_3.configure(padx="10")
        self.BUSD_BUTTON_3.configure(text="BUSD")
        self.BUSD_BUTTON_3.configure(value="BUSD")
        self.BUSD_BUTTON_3.configure(variable=pancake_swap_bot_ui_support.TOKEN_TO_CHOICE)

        self.CUSTOMTOKEN_BUTTON_3 = tk.Radiobutton(self.Labelframe1_4)
        self.CUSTOMTOKEN_BUTTON_3.place(x=0, y=160, height=40, width=44, bordermode='ignore')
        self.CUSTOMTOKEN_BUTTON_3.configure(activebackground="#ececec")
        self.CUSTOMTOKEN_BUTTON_3.configure(activeforeground="#000000")
        self.CUSTOMTOKEN_BUTTON_3.configure(anchor='w')
        self.CUSTOMTOKEN_BUTTON_3.configure(background="#d9d9d9")
        self.CUSTOMTOKEN_BUTTON_3.configure(disabledforeground="#a3a3a3")
        self.CUSTOMTOKEN_BUTTON_3.configure(foreground="#000000")
        self.CUSTOMTOKEN_BUTTON_3.configure(highlightbackground="#d9d9d9")
        self.CUSTOMTOKEN_BUTTON_3.configure(highlightcolor="black")
        self.CUSTOMTOKEN_BUTTON_3.configure(justify='left')
        self.CUSTOMTOKEN_BUTTON_3.configure(padx="10")
        self.CUSTOMTOKEN_BUTTON_3.configure(text="CUSTOM")
        self.CUSTOMTOKEN_BUTTON_3.configure(value="CUSTOM")
        self.CUSTOMTOKEN_BUTTON_3.configure(variable=pancake_swap_bot_ui_support.TOKEN_TO_CHOICE)

        def activateRadio( obj):
            obj.select()
            pass



        self.Labelframe1_5 = tk.LabelFrame(top)
        self.Labelframe1_5.place(x=25, y=15, height=80 , width=174)
        self.Labelframe1_5.configure(relief='groove')
        self.Labelframe1_5.configure(foreground="black")
        self.Labelframe1_5.configure(text="Percentage to swap")
        self.Labelframe1_5.configure(background="#d9d9d9")
        self.Labelframe1_5.configure(highlightbackground="#d9d9d9")
        self.Labelframe1_5.configure(highlightcolor="black")


        self.PERCENTAGE_BUTTON = tk.Entry(self.Labelframe1_5)
        self.PERCENTAGE_BUTTON.place(x=55, y=35, height=24, width=25 , bordermode='ignore')
        self.PERCENTAGE_BUTTON.configure(background="white")
        self.PERCENTAGE_BUTTON.configure(font="TkTextFont")
        self.PERCENTAGE_BUTTON.configure(foreground="black")
        self.PERCENTAGE_BUTTON.configure(highlightbackground="#d9d9d9")
        self.PERCENTAGE_BUTTON.configure(highlightcolor="black")
        self.PERCENTAGE_BUTTON.configure(insertbackground="black")
        self.PERCENTAGE_BUTTON.configure(selectbackground="blue")
        self.PERCENTAGE_BUTTON.configure(selectforeground="white")
        self.PERCENTAGE_BUTTON.configure(textvariable=pancake_swap_bot_ui_support.PERCENTAGE)
        # self.PERCENTAGE_BUTTON.bind("<Button-1>", lambda e: activateRadio(self.CUSTOMTOKEN_BUTTON))


        # self.CUSTOM_TOKEN_TEXT_TO.bind("<Button-1>", lambda e: activateRadio(self.CUSTOMTOKEN_BUTTON_3))


        # Percentage of from token to swap:
        self.CUSTOM_TOKEN_TEXT_TO = tk.Entry(self.Labelframe1_4)
        self.CUSTOM_TOKEN_TEXT_TO.place(x=27, y=170, height=24, width=131, bordermode='ignore')
        self.CUSTOM_TOKEN_TEXT_TO.configure(background="white")
        self.CUSTOM_TOKEN_TEXT_TO.configure(font="TkTextFont")
        self.CUSTOM_TOKEN_TEXT_TO.configure(foreground="black")
        self.CUSTOM_TOKEN_TEXT_TO.configure(highlightbackground="#d9d9d9")
        self.CUSTOM_TOKEN_TEXT_TO.configure(highlightcolor="black")
        self.CUSTOM_TOKEN_TEXT_TO.configure(insertbackground="black")
        self.CUSTOM_TOKEN_TEXT_TO.configure(selectbackground="blue")
        self.CUSTOM_TOKEN_TEXT_TO.configure(selectforeground="white")
        self.CUSTOM_TOKEN_TEXT_TO.bind("<Button-1>", lambda e: activateRadio(self.CUSTOMTOKEN_BUTTON_3))
        self.CUSTOM_TOKEN_TEXT_TO.configure(textvariable=pancake_swap_bot_ui_support.TOKEN_CUSTOM_TO_CHOICE)


        self.QUANTITY_LABEL = tk.Label(top)
        self.QUANTITY_LABEL.place(relx=0.349, rely=0.326, height=21, width=37)
        self.QUANTITY_LABEL.configure(activebackground="#f9f9f9")
        self.QUANTITY_LABEL.configure(activeforeground="black")
        self.QUANTITY_LABEL.configure(background="#d9d9d9")
        self.QUANTITY_LABEL.configure(disabledforeground="#a3a3a3")
        self.QUANTITY_LABEL.configure(foreground="#000000")
        self.QUANTITY_LABEL.configure(highlightbackground="#d9d9d9")
        self.QUANTITY_LABEL.configure(highlightcolor="black")
        self.QUANTITY_LABEL.configure(text=SWAPS_WORDING)


        self.TAKE_PROFIT_AT = tk.Entry(top)
        self.TAKE_PROFIT_AT.place(x=339, y=220, height=24, width=225)
        self.TAKE_PROFIT_AT.configure(background="white")
        self.TAKE_PROFIT_AT.configure(font="TkTextFont")
        self.TAKE_PROFIT_AT.configure(foreground="black")
        self.TAKE_PROFIT_AT.configure(highlightbackground="#d9d9d9")
        self.TAKE_PROFIT_AT.configure(highlightcolor="black")
        self.TAKE_PROFIT_AT.configure(insertbackground="black")
        self.TAKE_PROFIT_AT.configure(selectbackground="blue")
        self.TAKE_PROFIT_AT.configure(selectforeground="white")
        self.TAKE_PROFIT_AT.configure(state='disabled')
        self.TAKE_PROFIT_AT.configure(textvariable =pancake_swap_bot_ui_support.LIMIT_TP)
        self.tooltip_font = "TkDefaultFont"
        self.TAKE_PROFIT_AT_tooltip = \
        ToolTip(self.TAKE_PROFIT_AT, self.tooltip_font, "Wait for the price to appear, then select a price at which to sell")



        # CHECK BOX TO ACTIVATE LIMIT
        self.CHECK_BOX_TP = tk.Checkbutton(top)
        self.CHECK_BOX_TP.place(x=569, y=220, height=24, width=15)
        self.CHECK_BOX_TP.configure(state='disabled')
        self.CHECK_BOX_TP.configure(var= pancake_swap_bot_ui_support.TAKE_PROFIT_ACTIVATED)
        self.CHECK_BOX_TP_tooltip = \
        ToolTip(self.CHECK_BOX_TP, self.tooltip_font, "Check this box to activate take profit limit")

        self.STOP_LOSS_AT = tk.Entry(top)
        self.STOP_LOSS_AT.place(x=339, y=260, height=24, width=225)
        self.STOP_LOSS_AT.configure(background="white")
        self.STOP_LOSS_AT.configure(font="TkTextFont")
        self.STOP_LOSS_AT.configure(foreground="black")
        self.STOP_LOSS_AT.configure(highlightbackground="#d9d9d9")
        self.STOP_LOSS_AT.configure(highlightcolor="black")
        self.STOP_LOSS_AT.configure(insertbackground="black")
        self.STOP_LOSS_AT.configure(selectbackground="blue")
        self.STOP_LOSS_AT.configure(selectforeground="white")
        self.STOP_LOSS_AT.configure(state='disabled')
        self.STOP_LOSS_AT.configure(textvariable =pancake_swap_bot_ui_support.STOP_LOSS)
        self.tooltip_font = "TkDefaultFont"
        self.STOP_LOSS_AT_tooltip = \
        ToolTip(self.STOP_LOSS_AT, self.tooltip_font, "NOT AVAILABLE YET")


        
        # CHECK BOX TO ACTIVATE STOP LOSS
        self.CHECK_BOX_SL = tk.Checkbutton(top)
        self.CHECK_BOX_SL.place(x=569, y=260, height=24, width=15)
        self.CHECK_BOX_SL.configure(state='disabled')
        self.CHECK_BOX_SL.configure(var= pancake_swap_bot_ui_support.STOP_LOSS_ACTIVATED)

        
        self.CHECK_BOX_SL_tooltip = \
        ToolTip(self.CHECK_BOX_SL, self.tooltip_font, "Check this box to activate STOP LOSS limit")


        self.TAKE_PROFIT_LABEL = tk.Label(top)
        self.TAKE_PROFIT_LABEL.place(x=238, y=220, height=21, width=94)
        self.TAKE_PROFIT_LABEL.configure(activebackground="#f9f9f9")
        self.TAKE_PROFIT_LABEL.configure(activeforeground="black")
        self.TAKE_PROFIT_LABEL.configure(background="#d9d9d9")
        self.TAKE_PROFIT_LABEL.configure(disabledforeground="#a3a3a3")
        self.TAKE_PROFIT_LABEL.configure(foreground="#000000")
        self.TAKE_PROFIT_LABEL.configure(highlightbackground="#d9d9d9")
        self.TAKE_PROFIT_LABEL.configure(highlightcolor="black")
        self.TAKE_PROFIT_LABEL.configure(text="Take Profit at")

        self.STOP_LOSS_LABEL = tk.Label(top)
        self.STOP_LOSS_LABEL.place(x=248, y=260, height=21, width=77)
        self.STOP_LOSS_LABEL.configure(activebackground="#f9f9f9")
        self.STOP_LOSS_LABEL.configure(activeforeground="black")
        self.STOP_LOSS_LABEL.configure(background="#d9d9d9")
        self.STOP_LOSS_LABEL.configure(disabledforeground="#a3a3a3")
        self.STOP_LOSS_LABEL.configure(foreground="#000000")
        self.STOP_LOSS_LABEL.configure(highlightbackground="#d9d9d9")
        self.STOP_LOSS_LABEL.configure(highlightcolor="black")
        self.STOP_LOSS_LABEL.configure(text="Stop Loss at")

        self.START_BOT_BUTTON = tk.Button(top)
        self.START_BOT_BUTTON.place(x=339, y=300, height=24, width=237)
        self.START_BOT_BUTTON.configure(activebackground="#ececec")
        self.START_BOT_BUTTON.configure(activeforeground="#000000")
        self.START_BOT_BUTTON.configure(background="#d9d9d9")
        self.START_BOT_BUTTON.configure(disabledforeground="#a3a3a3")
        self.START_BOT_BUTTON.configure(foreground="#000000")
        self.START_BOT_BUTTON.configure(highlightbackground="#d9d9d9")
        self.START_BOT_BUTTON.configure(highlightcolor="black")
        self.START_BOT_BUTTON.configure(pady="0")
        self.START_BOT_BUTTON.configure(text="START BOT")
        self.START_BOT_BUTTON.configure(command=self.startRobot)
        

        self.LICENCE_BUTTON = ttk.Button(top)
        self.LICENCE_BUTTON.place(x=339, y=440, height=25, width=76)
        self.LICENCE_BUTTON.configure(takefocus="")
        self.LICENCE_BUTTON.configure(text="Licence")
        self.LICENCE_BUTTON.configure(command=bm.WARNING_TEXT)

        self.READ_ME_BUTTON = ttk.Button(top)
        self.READ_ME_BUTTON.place(x=422, y=440, height=25, width=86)
        self.READ_ME_BUTTON.configure(takefocus="")
        self.READ_ME_BUTTON.configure(text="Read Me")
        self.READ_ME_BUTTON.configure(command=bm.READ_ME)

        self.CRYPTOSHIRT_BUTTON = ttk.Button(top)
        self.CRYPTOSHIRT_BUTTON.place(x=514, y=440, height=25, width=106)
        self.CRYPTOSHIRT_BUTTON.configure(takefocus="")
        self.CRYPTOSHIRT_BUTTON.configure(text="Get a cryptoshirt")
        self.CRYPTOSHIRT_BUTTON.configure(command=bm.BUY_SHIRTS)

        self.SUPPORT_BUTTON = ttk.Button(top)
        self.SUPPORT_BUTTON.place(x=514, y=470, height=25, width=146)
        self.SUPPORT_BUTTON.configure(takefocus="")
        self.SUPPORT_BUTTON.configure(text="Support bot with nano :)")
        self.SUPPORT_BUTTON.configure(command=bm.NANO_TIPS)

        self.SUPPORT_BUTTON = ttk.Button(top)
        self.SUPPORT_BUTTON.place(x=514, y=500, height=25, width=155)
        self.SUPPORT_BUTTON.configure(takefocus="")
        self.SUPPORT_BUTTON.configure(text="Support bot on ETH BNB :)")
        self.SUPPORT_BUTTON.configure(command=bm.BNB_ETH_TIPS)

       
        # render = PhotoImage(file="pcs.gif")
        # img = Label(self, image=render)
        # img.image = render
        # img.place(x=0, y=0)


        pancakeImage = PhotoImage(file="pcs.gif")
        self.PancakeSwapIMAGE = tk.Canvas(top)
        self.PancakeSwapIMAGE.create_image(0, 0, image=pancakeImage)
        self.PancakeSwapIMAGE.place(x=330, y=30, height=132, width=142)
        # self.PancakeSwapIMAGE.pack()
        self.PancakeSwapIMAGE.configure(background="#d9d9d9")
        self.PancakeSwapIMAGE.configure(borderwidth="2")
        self.PancakeSwapIMAGE.configure(highlightbackground="#d9d9d9")
        self.PancakeSwapIMAGE.configure(highlightcolor="black")
        self.PancakeSwapIMAGE.configure(insertbackground="black")
        self.PancakeSwapIMAGE.configure(relief="ridge")
        self.PancakeSwapIMAGE.configure(selectbackground="blue")
        self.PancakeSwapIMAGE.configure(selectforeground="white")
        
        
        self.PRICING = tk.Label(top)
        self.PRICING.place(relx=0.756, rely=0.326, height=21, width=49)
        self.PRICING.configure(background="#d9d9d9")
        self.PRICING.configure(disabledforeground="#a3a3a3")
        self.PRICING.configure(foreground="#000000")
        self.PRICING.configure(justify='left')
        self.PRICING.configure(textvariable=pancake_swap_bot_ui_support.PRICE)

        self.CURRENT_PRICE_LABEL = tk.Label(top)
        self.CURRENT_PRICE_LABEL.place(relx=0.64, rely=0.326, height=21
                , width=78)
        self.CURRENT_PRICE_LABEL.configure(activebackground="#f9f9f9")
        self.CURRENT_PRICE_LABEL.configure(activeforeground="black")
        self.CURRENT_PRICE_LABEL.configure(background="#d9d9d9")
        self.CURRENT_PRICE_LABEL.configure(disabledforeground="#a3a3a3")
        self.CURRENT_PRICE_LABEL.configure(foreground="#000000")
        self.CURRENT_PRICE_LABEL.configure(highlightbackground="#d9d9d9")
        self.CURRENT_PRICE_LABEL.configure(highlightcolor="black")
        self.CURRENT_PRICE_LABEL.configure(justify='left')
        self.CURRENT_PRICE_LABEL.configure(text='''Current Price:''')

        self.QUANTITY_AT_STAKE = tk.Label(top)
        self.QUANTITY_AT_STAKE.place(relx=0.407, rely=0.326, height=21, width=94)
        self.QUANTITY_AT_STAKE.configure(background="#d9d9d9")
        self.QUANTITY_AT_STAKE.configure(disabledforeground="#a3a3a3")
        self.QUANTITY_AT_STAKE.configure(foreground="#000000")
        self.QUANTITY_AT_STAKE.configure(textvariable=pancake_swap_bot_ui_support.QUANTITY)

        self.UNITY = tk.Label(top)
        self.UNITY.place(relx=0.828, rely=0.326, height=21, width=104)
        self.UNITY.configure(background="#d9d9d9")
        self.UNITY.configure(cursor="fleur")
        self.UNITY.configure(disabledforeground="#a3a3a3")
        self.UNITY.configure(foreground="#000000")
        self.UNITY.configure(textvariable=pancake_swap_bot_ui_support.UNITY)


        self.START_SECOND_PART = tk.Button(top)
        self.START_SECOND_PART.place(x=585, y=245, height=24, width=50)
        self.START_SECOND_PART.configure(activebackground="#ececec")
        self.START_SECOND_PART.configure(activeforeground="#000000")
        self.START_SECOND_PART.configure(background="#d9d9d9")
        self.START_SECOND_PART.configure(disabledforeground="#a3a3a3")
        self.START_SECOND_PART.configure(foreground="#000000")
        self.START_SECOND_PART.configure(highlightbackground="#d9d9d9")
        self.START_SECOND_PART.configure(highlightcolor="black")
        self.START_SECOND_PART.configure(pady="0")
        self.START_SECOND_PART.configure(text="go")
        self.START_SECOND_PART.configure(command=self.startRobot)
        self.START_SECOND_PART.configure(command=self.startLimits)
        self.START_SECOND_PART.configure(state='disabled')
















# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





